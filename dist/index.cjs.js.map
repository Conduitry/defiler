{"version":3,"file":"index.cjs.js","sources":["../src/File.ts","../src/Watcher.ts","../src/context.ts","../src/Defiler.ts"],"sourcesContent":["import * as fs from 'fs';\n\nexport default class File {\n\t// path of file\n\tprivate _path: string = null;\n\t// cached dir\n\tprivate _dir: string = null;\n\t// cached filename\n\tprivate _filename: string = null;\n\t// cached ext\n\tprivate _ext: string = null;\n\t// stats of file\n\tstats: fs.Stats = null;\n\t// encoding\n\tprivate _enc: string = 'utf8';\n\t// Buffer of file contents\n\tprivate _bytes: Buffer = null;\n\t// string of file contents\n\tprivate _text: string = null;\n\n\tget path(): string {\n\t\treturn this._path;\n\t}\n\n\tset path(path: string) {\n\t\tif (typeof path !== 'string') {\n\t\t\tthrow new TypeError('file.path must be a string');\n\t\t}\n\t\tif (this._path !== path) {\n\t\t\tthis._path = path;\n\t\t\tthis._dir = this._filename = this._ext = null;\n\t\t}\n\t}\n\n\tget dir(): string {\n\t\tif (this._dir == null) {\n\t\t\tconst p = this._path.lastIndexOf('/');\n\t\t\tthis._dir = p > -1 ? this._path.slice(0, p) : '';\n\t\t}\n\t\treturn this._dir;\n\t}\n\n\tset dir(dir: string) {\n\t\tif (typeof dir !== 'string') {\n\t\t\tthrow new TypeError('file.dir must be a string');\n\t\t}\n\t\tthis.path = (dir ? dir + '/' : '') + this.filename;\n\t}\n\n\tget filename(): string {\n\t\tif (this._filename == null) {\n\t\t\tconst p = this._path.lastIndexOf('/');\n\t\t\tthis._filename = p > -1 ? this._path.slice(p + 1) : this._path;\n\t\t}\n\t\treturn this._filename;\n\t}\n\n\tset filename(filename) {\n\t\tif (typeof filename !== 'string') {\n\t\t\tthrow new TypeError('file.filename must be a string');\n\t\t}\n\t\tconst old = this.filename;\n\t\tthis.path = (old ? this._path.slice(0, -old.length) : this._path) + filename;\n\t}\n\n\tget ext(): string {\n\t\tif (this._ext == null) {\n\t\t\tconst p1 = this._path.lastIndexOf('.');\n\t\t\tconst p2 = this._path.lastIndexOf('/');\n\t\t\tthis._ext = p1 > -1 && p1 > p2 ? this._path.slice(p1) : '';\n\t\t}\n\t\treturn this._ext;\n\t}\n\n\tset ext(ext: string) {\n\t\tif (typeof ext !== 'string') {\n\t\t\tthrow new TypeError('file.ext must be a string');\n\t\t}\n\t\tconst old = this.ext;\n\t\tthis.path = (old ? this._path.slice(0, -old.length) : this._path) + ext;\n\t}\n\n\tget enc(): string {\n\t\treturn this._enc;\n\t}\n\n\tset enc(enc: string) {\n\t\tif (!Buffer.isEncoding(enc)) {\n\t\t\tthrow new TypeError('file.enc must be a supported encoding');\n\t\t}\n\t\tthis._enc = enc;\n\t}\n\n\tget bytes(): Buffer {\n\t\treturn this._bytes == null && this._text != null ? (this._bytes = Buffer.from(this._text, this._enc)) : this._bytes;\n\t}\n\n\tset bytes(bytes: Buffer) {\n\t\tif (bytes != null && !Buffer.isBuffer(bytes)) {\n\t\t\tthrow new TypeError('file.bytes must be a Buffer or null');\n\t\t}\n\t\tthis._bytes = bytes;\n\t\tthis._text = null;\n\t}\n\n\tget text(): string {\n\t\treturn this._text == null && this._bytes != null ? (this._text = this._bytes.toString(this._enc)) : this._text;\n\t}\n\n\tset text(text: string) {\n\t\tif (text != null && typeof text !== 'string') {\n\t\t\tthrow new TypeError('file.text must be a string or null');\n\t\t}\n\t\tthis._text = text;\n\t\tthis._bytes = null;\n\t}\n}\n","import * as EventEmitter from 'events';\nimport * as fs from 'fs';\nimport { promisify } from 'util';\n\nconst readdir = promisify(fs.readdir);\nconst stat = promisify(fs.stat);\n\nexport default class Watcher extends EventEmitter {\n\tdir: string;\n\tfilter: (file: { path: string; stats: fs.Stats }) => boolean;\n\twatch: boolean;\n\tdebounce: number;\n\t// paths of all directories -> FSWatcher instances\n\tprivate _watchers = new Map<string, fs.FSWatcher>();\n\t// paths of all files -> file stats\n\tprivate _stats = new Map<string, fs.Stats>();\n\t// paths of files with pending debounced events -> setTimeout timer ids\n\tprivate _timeouts = new Map<string, NodeJS.Timer>();\n\t// queue of pending FSWatcher events to handle\n\tprivate _queue: string[] = [];\n\t// whether some FSWatcher event is currently already in the process of being handled\n\tprivate _isProcessing: boolean = false;\n\n\tconstructor(data: object /* = { dir, filter, watch, debounce } */) {\n\t\tsuper();\n\t\tObject.assign(this, data);\n\t}\n\n\t// recurse directory, get stats, set up FSWatcher instances\n\t// returns array of { path, stats }\n\tasync init(): Promise<{ path: string; stats: fs.Stats }[]> {\n\t\tawait this._recurse(this.dir);\n\t\treturn [...this._stats.entries()].map(([path, stats]) => ({\n\t\t\tpath,\n\t\t\tstats,\n\t\t}));\n\t}\n\n\t// recurse a given directory\n\tprivate async _recurse(full: string): Promise<void> {\n\t\tconst path = full.slice(this.dir.length + 1);\n\t\tconst stats = await stat(full);\n\t\tif (this.filter && !(await this.filter({ path, stats }))) {\n\t\t\treturn;\n\t\t}\n\t\tif (stats.isFile()) {\n\t\t\tthis._stats.set(path, stats);\n\t\t} else if (stats.isDirectory()) {\n\t\t\tif (this.watch) {\n\t\t\t\tthis._watchers.set(path, fs.watch(full, this._handle.bind(this, full)));\n\t\t\t}\n\t\t\tawait Promise.all((await readdir(full)).map(sub => this._recurse(full + '/' + sub)));\n\t\t}\n\t}\n\n\t// handle FSWatcher event for given directory\n\tprivate _handle(dir: string, event: string, file: string): void {\n\t\tconst full = dir + '/' + file;\n\t\tif (this._timeouts.has(full)) {\n\t\t\tclearTimeout(this._timeouts.get(full));\n\t\t}\n\t\tthis._timeouts.set(\n\t\t\tfull,\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._timeouts.delete(full);\n\t\t\t\tthis._enqueue(full);\n\t\t\t}, this.debounce),\n\t\t);\n\t}\n\n\t// add an FSWatcher event to the queue, and handle queued events\n\tprivate async _enqueue(full: string): Promise<void> {\n\t\tthis._queue.push(full);\n\t\tif (this._isProcessing) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isProcessing = true;\n\t\twhile (this._queue.length) {\n\t\t\tconst full = this._queue.shift();\n\t\t\tconst path = full.slice(this.dir.length + 1);\n\t\t\ttry {\n\t\t\t\tconst stats = await stat(full);\n\t\t\t\tif (this.filter && !(await this.filter({ path, stats }))) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (stats.isFile()) {\n\t\t\t\t\t// note the new/changed file\n\t\t\t\t\tthis._stats.set(path, stats);\n\t\t\t\t\tthis.emit('', { event: '+', path, stats });\n\t\t\t\t} else if (stats.isDirectory() && !this._watchers.has(path)) {\n\t\t\t\t\t// note the new directory: start watching it, and report any files in it\n\t\t\t\t\tawait this._recurse(full);\n\t\t\t\t\tfor (const [newPath, stats] of this._stats.entries()) {\n\t\t\t\t\t\tif (newPath.startsWith(path + '/')) {\n\t\t\t\t\t\t\tthis.emit('', { event: '+', path: newPath, stats });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// probably this was a deleted file/directory\n\t\t\t\tif (this._stats.has(path)) {\n\t\t\t\t\t// note the deleted file\n\t\t\t\t\tthis._stats.delete(path);\n\t\t\t\t\tthis.emit('', { event: '-', path });\n\t\t\t\t} else if (this._watchers.has(path)) {\n\t\t\t\t\t// note the deleted directory: stop watching it, and report any files that were in it\n\t\t\t\t\tfor (const old of this._watchers.keys()) {\n\t\t\t\t\t\tif (old === path || old.startsWith(path + '/')) {\n\t\t\t\t\t\t\tthis._watchers.get(old).close();\n\t\t\t\t\t\t\tthis._watchers.delete(old);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const old of this._stats.keys()) {\n\t\t\t\t\t\tif (old.startsWith(path + '/')) {\n\t\t\t\t\t\t\tthis._stats.delete(old);\n\t\t\t\t\t\t\tthis.emit('', { event: '-', path: old });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._isProcessing = false;\n\t}\n}\n\nexport interface WatcherEvent {\n\tevent: string;\n\tpath: string;\n\tstats?: fs.Stats;\n}\n","import { createHook, executionAsyncId } from 'async_hooks';\n\nconst contexts = new Map<Number, any>();\n\ncreateHook({\n\tinit: (id, _, trigger) => contexts.set(id, contexts.get(trigger)),\n\tdestroy: id => contexts.delete(id),\n}).enable();\n\nexport const create = (data: any): void => {\n\tcontexts.set(executionAsyncId(), data);\n};\n\nexport const current = (): any => contexts.get(executionAsyncId());\n","import * as fs from 'fs';\nimport { resolve } from 'path';\nimport { promisify } from 'util';\n\nimport File from './File';\nimport Watcher, { WatcherEvent } from './Watcher';\nimport * as context from './context';\n\nconst readFile = promisify(fs.readFile);\n\nexport default class Defiler {\n\t// set of original paths for all physical files\n\tpaths = new Set<string>();\n\t// original paths -> original file data for all physical files ({ path, stats, bytes, enc })\n\tprivate _origData = new Map<string, FileData>();\n\t// original paths -> transformed files for all physical and virtual files\n\tfiles = new Map<string, File>();\n\t// Before, During, or After exec has been called\n\tprivate _status = Status.Before;\n\t// Watcher instances\n\tprivate _watchers: WatcherData[];\n\t// the transform to run on all files\n\tprivate _transform: Transform;\n\t// registered generators\n\tprivate _generators: Generator[];\n\t// (base, path) => path resolver function, used in defiler.get and defiler.add from transform\n\tprivate _resolver: Resolver;\n\t// handler to call when errors occur\n\tprivate _onerror: OnError;\n\t// original paths of all files currently undergoing transformation and symbols of all generators currently running\n\tprivate _active = new Set<Name>();\n\t// original paths -> { promise, resolve, paths } objects for when awaited files become available\n\tprivate _whenFound = new Map<string | Filter, WhenFound>();\n\t// array of [dependent, dependency] pairs, specifying changes to which files should trigger re-processing which other files\n\tprivate _deps: [Name, string | Filter][] = [];\n\t// queue of pending Watcher events to handle\n\tprivate _queue: [WatcherData, WatcherEvent][] = [];\n\t// whether some Watcher event is currently already in the process of being handled\n\tprivate _isProcessing = false;\n\t// end the current wave\n\tprivate _endWave: () => void = null;\n\n\tconstructor(...args: any[]) {\n\t\tconst { transform, generators = [], resolver, onerror } = <DefilerData>args.pop();\n\t\tif (typeof transform !== 'function') {\n\t\t\tthrow new TypeError('defiler: transform must be a function');\n\t\t}\n\t\tif (!Array.isArray(generators) || generators.some(generator => typeof generator !== 'function')) {\n\t\t\tthrow new TypeError('defiler: generators must be an array of functions');\n\t\t}\n\t\tif (resolver && typeof resolver !== 'function') {\n\t\t\tthrow new TypeError('defiler: resolver must be a function');\n\t\t}\n\t\tif (onerror && typeof onerror !== 'function') {\n\t\t\tthrow new TypeError('defiler: onerror must be a function');\n\t\t}\n\t\tthis._watchers = args.map(({ dir, filter, read = true, enc = 'utf8', pre, watch = true, debounce = 10 }) => {\n\t\t\tif (typeof dir !== 'string') {\n\t\t\t\tthrow new TypeError('defiler: dir must be a string');\n\t\t\t}\n\t\t\tif (filter && typeof filter !== 'function') {\n\t\t\t\tthrow new TypeError('defiler: filter must be a function');\n\t\t\t}\n\t\t\tif (typeof read !== 'boolean' && typeof read !== 'function') {\n\t\t\t\tthrow new TypeError('defiler: read must be a boolean or a function');\n\t\t\t}\n\t\t\tif (!Buffer.isEncoding(enc) && typeof enc !== 'function') {\n\t\t\t\tthrow new TypeError('defiler: enc must be a supported encoding or a function');\n\t\t\t}\n\t\t\tif (pre && typeof pre !== 'function') {\n\t\t\t\tthrow new TypeError('defiler: pre must be a function');\n\t\t\t}\n\t\t\tif (typeof watch !== 'boolean') {\n\t\t\t\tthrow new TypeError('defiler: watch must be a boolean');\n\t\t\t}\n\t\t\tif (typeof debounce !== 'number') {\n\t\t\t\tthrow new TypeError('defiler: debounce must be a number');\n\t\t\t}\n\t\t\treturn <WatcherData>new Watcher({ dir, filter, read, enc, pre, watch, debounce });\n\t\t});\n\t\tthis._transform = transform;\n\t\tthis._generators = generators;\n\t\tthis._resolver = resolver;\n\t\tthis._onerror = onerror;\n\t}\n\n\t// execute everything, and return a promise that resolves when the first wave of processing is complete\n\tasync exec(): Promise<void> {\n\t\tif (this._status !== Status.Before) {\n\t\t\tthrow new Error('defiler.exec: cannot call more than once');\n\t\t}\n\t\tthis._status = Status.During;\n\t\tthis._isProcessing = true;\n\t\tconst done = this._startWave();\n\t\t// init the Watcher instances\n\t\tconst files: [WatcherData, string, { path: string; stats: fs.Stats }][] = [];\n\t\tawait Promise.all(\n\t\t\tthis._watchers.map(async watcher => {\n\t\t\t\twatcher.dir = resolve(watcher.dir);\n\t\t\t\twatcher.on('', event => this._enqueue(watcher, event));\n\t\t\t\t// note that all files are pending transformation\n\t\t\t\tawait Promise.all(\n\t\t\t\t\t(await watcher.init()).map(async file => {\n\t\t\t\t\t\tconst { path } = file;\n\t\t\t\t\t\tif (watcher.pre) {\n\t\t\t\t\t\t\tawait watcher.pre(file);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.paths.add(file.path);\n\t\t\t\t\t\tthis._active.add(file.path);\n\t\t\t\t\t\tfiles.push([watcher, path, file]);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\tfor (const generator of this._generators) {\n\t\t\tthis._active.add(generator);\n\t\t}\n\t\t// process each physical file\n\t\tfor (const [watcher, path, file] of files) {\n\t\t\tthis._processPhysicalFile(watcher, path, file);\n\t\t}\n\t\t// process each generator\n\t\tfor (const generator of this._generators) {\n\t\t\tthis._processGenerator(generator);\n\t\t}\n\t\t// wait and finish up\n\t\tawait done;\n\t\tthis._status = Status.After;\n\t\tthis._isProcessing = false;\n\t\tthis._enqueue();\n\t}\n\n\t// wait for a file to be available and retrieve it, marking dependencies as appropriate\n\tasync get(path: string): Promise<File>;\n\tasync get(paths: string[]): Promise<File[]>;\n\tasync get(filter: Filter): Promise<File[]>;\n\tasync get(_: any): Promise<any> {\n\t\tif (typeof _ === 'string') {\n\t\t\t_ = this.resolve(_);\n\t\t}\n\t\tif (Array.isArray(_)) {\n\t\t\treturn Promise.all(_.map(path => this.get(path)));\n\t\t}\n\t\tif (typeof _ !== 'string' && typeof _ !== 'function') {\n\t\t\tthrow new TypeError('defiler.get: argument must be a string, an array, or a function');\n\t\t}\n\t\tconst current = <Name>context.current();\n\t\tif (current) {\n\t\t\tthis._deps.push([current, _]);\n\t\t}\n\t\tif (this._status === Status.During && current && (typeof _ === 'function' || !this.files.has(_))) {\n\t\t\tif (this._whenFound.has(_)) {\n\t\t\t\tconst { promise, paths } = this._whenFound.get(_);\n\t\t\t\tpaths.push(current);\n\t\t\t\tawait promise;\n\t\t\t} else {\n\t\t\t\tlet resolve;\n\t\t\t\tconst promise = new Promise<void>(res => (resolve = res));\n\t\t\t\tthis._whenFound.set(_, { promise, resolve, paths: [current] });\n\t\t\t\tawait promise;\n\t\t\t}\n\t\t}\n\t\treturn typeof _ === 'function' ? this.get([...this.files.keys()].filter(_).sort()) : this.files.get(_);\n\t}\n\n\t// add a new virtual file\n\tadd(file: FileData): void {\n\t\tif (this._status === Status.Before) {\n\t\t\tthrow new Error('defiler.add: cannot call before calling exec');\n\t\t}\n\t\tif (typeof file !== 'object') {\n\t\t\tthrow new TypeError('defiler.add: file must be an object');\n\t\t}\n\t\tfile.path = this.resolve(file.path);\n\t\tthis._origData.set(file.path, file);\n\t\tthis._processFile(file, 'add');\n\t}\n\n\t// resolve a given path from the file currently being transformed\n\tresolve(path: string): string {\n\t\treturn this._resolver && typeof context.current() === 'string' ? this._resolver(context.current(), path) : path;\n\t}\n\n\t// private methods\n\n\t// return a Promise that we will resolve at the end of this wave, and save its resolver\n\tprivate _startWave(): Promise<void> {\n\t\treturn new Promise(res => (this._endWave = res));\n\t}\n\n\t// add a Watcher event to the queue, and handle queued events\n\tprivate async _enqueue(watcher?: WatcherData, event?: WatcherEvent): Promise<void> {\n\t\tif (event) {\n\t\t\tthis._queue.push([watcher, event]);\n\t\t}\n\t\tif (this._isProcessing) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isProcessing = true;\n\t\twhile (this._queue.length) {\n\t\t\tconst done = this._startWave();\n\t\t\tconst [watcher, { event, path, stats }] = this._queue.shift();\n\t\t\tconst file = { path, stats };\n\t\t\tif (watcher.pre) {\n\t\t\t\tawait watcher.pre(file);\n\t\t\t}\n\t\t\tif (event === '+') {\n\t\t\t\tthis._processPhysicalFile(watcher, path, file);\n\t\t\t} else if (event === '-') {\n\t\t\t\tconst { path } = file;\n\t\t\t\tconst oldFile = this.files.get(path);\n\t\t\t\tthis.paths.delete(path);\n\t\t\t\tthis._origData.delete(path);\n\t\t\t\tthis.files.delete(path);\n\t\t\t\tawait this._callTransform(oldFile, 'delete');\n\t\t\t\tthis._processDependents(path);\n\t\t\t}\n\t\t\tawait done;\n\t\t}\n\t\tthis._isProcessing = false;\n\t}\n\n\t// create a file object for a physical file and process it\n\tprivate async _processPhysicalFile({ dir, read, enc }: WatcherData, path: string, file: FileData): Promise<void> {\n\t\tif (typeof read === 'function') {\n\t\t\tread = await read({ path, stats: file.stats });\n\t\t}\n\t\tif (read) {\n\t\t\tfile.bytes = await readFile(dir + '/' + path);\n\t\t}\n\t\tif (typeof enc === 'function') {\n\t\t\tenc = await enc({ path, stats: file.stats, bytes: file.bytes });\n\t\t}\n\t\tfile.enc = enc;\n\t\tthis.paths.add(file.path);\n\t\tthis._origData.set(file.path, file);\n\t\tawait this._processFile(file, 'read');\n\t}\n\n\t// transform a file, store it, and process dependents\n\tprivate async _processFile(data: FileData, event: string): Promise<void> {\n\t\tconst file: File = Object.assign(new File(), data);\n\t\tconst { path } = file;\n\t\tthis._active.add(path);\n\t\tawait this._callTransform(file, event);\n\t\tthis.files.set(path, file);\n\t\tif (this._status === Status.During) {\n\t\t\tthis._markFound(path);\n\t\t} else {\n\t\t\tthis._processDependents(path);\n\t\t}\n\t\tthis._active.delete(path);\n\t\tthis._checkWave();\n\t}\n\n\t// call the transform on a file with the given event string, and handle errors\n\tprivate async _callTransform(file: File, event: string): Promise<void> {\n\t\tawait null;\n\t\tcontext.create(file.path);\n\t\ttry {\n\t\t\tawait this._transform({ file, event });\n\t\t} catch (error) {\n\t\t\tif (this._onerror) {\n\t\t\t\tthis._onerror({ file, event, error });\n\t\t\t}\n\t\t}\n\t}\n\n\t// run the generator given by the symbol\n\tprivate async _processGenerator(generator: Generator): Promise<void> {\n\t\tthis._active.add(generator);\n\t\tawait null;\n\t\tcontext.create(generator);\n\t\ttry {\n\t\t\tawait generator();\n\t\t} catch (error) {\n\t\t\tif (this._onerror) {\n\t\t\t\tthis._onerror({ generator, error });\n\t\t\t}\n\t\t}\n\t\tthis._active.delete(generator);\n\t\tthis._checkWave();\n\t}\n\n\t// re-process all files that depend on a particular path\n\tprivate _processDependents(path: string): void {\n\t\tconst dependents = new Set<Name>();\n\t\tfor (const [dependent, dependency] of this._deps) {\n\t\t\tif (typeof dependency === 'string' ? dependency === path : dependency(path)) {\n\t\t\t\tdependents.add(dependent);\n\t\t\t}\n\t\t}\n\t\tthis._deps = this._deps.filter(([dependent]) => !dependents.has(dependent));\n\t\tfor (const dependent of dependents) {\n\t\t\tif (typeof dependent === 'function') {\n\t\t\t\tthis._processGenerator(dependent);\n\t\t\t} else if (this._origData.has(dependent)) {\n\t\t\t\tthis._processFile(this._origData.get(dependent), 'retransform');\n\t\t\t}\n\t\t}\n\t\tthis._checkWave();\n\t}\n\n\t// check whether this wave is complete, and, if not, whether we need to break a deadlock\n\tprivate _checkWave(): void {\n\t\tif (!this._active.size) {\n\t\t\tthis._endWave();\n\t\t} else if (this._status === Status.During) {\n\t\t\tconst filterWaiting = new Set<Name>();\n\t\t\tconst allWaiting = new Set<Name>();\n\t\t\tfor (const [path, { paths }] of this._whenFound) {\n\t\t\t\tif (typeof path === 'function' || this._active.has(path)) {\n\t\t\t\t\tpaths.forEach(path => filterWaiting.add(path));\n\t\t\t\t}\n\t\t\t\tpaths.forEach(path => allWaiting.add(path));\n\t\t\t}\n\t\t\tif ([...this._active].every(path => filterWaiting.has(path))) {\n\t\t\t\t// all pending files are currently waiting for a filter or another pending file\n\t\t\t\t// break deadlock: assume all filters have found all they're going to find\n\t\t\t\tfor (const path of this._whenFound.keys()) {\n\t\t\t\t\tif (typeof path === 'function') {\n\t\t\t\t\t\tthis._markFound(path);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ([...this._active].every(path => allWaiting.has(path))) {\n\t\t\t\t// all pending files are currently waiting for one or more other files to exist\n\t\t\t\t// break deadlock: assume all files that have not appeared yet will never do so\n\t\t\t\tfor (const path of this._whenFound.keys()) {\n\t\t\t\t\tif (typeof path === 'string' && !this._active.has(path)) {\n\t\t\t\t\t\tthis._markFound(path);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// mark a given awaited file as being found\n\tprivate _markFound(path: string | Filter): void {\n\t\tif (this._whenFound.has(path)) {\n\t\t\tthis._whenFound.get(path).resolve();\n\t\t\tthis._whenFound.delete(path);\n\t\t}\n\t}\n}\n\ninterface DefilerData {\n\ttransform: Transform;\n\tgenerators?: Generator[];\n\tresolver?: Resolver;\n\tonerror?: OnError;\n}\n\ninterface FileData {\n\tpath: string;\n\t[propName: string]: any;\n}\n\ninterface Filter {\n\t(path: string): boolean;\n}\n\ninterface Generator {\n\t(): Promise<void>;\n}\n\ntype Name = string | Generator;\n\ninterface OnError {\n\t(\n\t\targ: {\n\t\t\tfile?: any;\n\t\t\tevent?: string;\n\t\t\tgenerator?: Generator;\n\t\t\terror: Error;\n\t\t},\n\t): void;\n}\n\ninterface Resolver {\n\t(base: string, path: string): string;\n}\n\nconst enum Status {\n\tBefore,\n\tDuring,\n\tAfter,\n}\n\ninterface Transform {\n\t(\n\t\targ: {\n\t\t\tfile: File;\n\t\t\tevent: string;\n\t\t},\n\t): Promise<void>;\n}\n\ninterface WatcherData extends Watcher {\n\tread: boolean | ((arg: { path: string; stats: fs.Stats }) => Promise<boolean>);\n\tenc: string | ((arg: { path: string; stats: fs.Stats; bytes: Buffer }) => Promise<string>);\n\tpre: (data: FileData) => Promise<void>;\n}\n\ninterface WhenFound {\n\tpromise: Promise<void>;\n\tresolve: () => void;\n\tpaths: Name[];\n}\n"],"names":["path","promisify","fs.readdir","fs.stat","fs.watch","createHook","executionAsyncId","fs.readFile","resolve","current","context.current","context.create"],"mappings":"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"}